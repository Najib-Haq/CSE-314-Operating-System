diff --git a/Makefile b/Makefile
index 09d790c..5ffba96 100644
--- a/Makefile
+++ b/Makefile
@@ -52,6 +52,7 @@ endif
 
 # If the makefile can't find QEMU, specify its path here
 # QEMU = qemu-system-i386
+QEMU = qemu-system-x86_64 # needed to do this sudo apt-get install qemu-system-x86
 
 # Try to infer the correct QEMU
 ifndef QEMU
@@ -181,6 +182,9 @@ UPROGS=\
 	_usertests\
 	_wc\
 	_zombie\
+	_testtickets\
+	_ps\
+	_timewithtickets\
 
 fs.img: mkfs README $(UPROGS)
 	./mkfs fs.img README $(UPROGS)
@@ -217,7 +221,7 @@ QEMUGDB = $(shell if $(QEMU) -help | grep -q '^-gdb'; \
 	then echo "-gdb tcp::$(GDBPORT)"; \
 	else echo "-s -p $(GDBPORT)"; fi)
 ifndef CPUS
-CPUS := 2
+CPUS := 1 # 2 originally but 1 for offlines
 endif
 QEMUOPTS = -drive file=fs.img,index=1,media=disk,format=raw -drive file=xv6.img,index=0,media=disk,format=raw -smp $(CPUS) -m 512 $(QEMUEXTRA)
 
@@ -251,6 +255,7 @@ EXTRA=\
 	mkfs.c ulib.c user.h cat.c echo.c forktest.c grep.c kill.c\
 	ln.c ls.c mkdir.c rm.c stressfs.c usertests.c wc.c zombie.c\
 	printf.c umalloc.c\
+	testtickets.c ps.c timewithtickets.c\
 	README dot-bochsrc *.pl toc.* runoff runoff1 runoff.list\
 	.gdbinit.tmpl gdbutil\
 
diff --git a/defs.h b/defs.h
index 82fb982..6189b15 100644
--- a/defs.h
+++ b/defs.h
@@ -9,6 +9,7 @@ struct spinlock;
 struct sleeplock;
 struct stat;
 struct superblock;
+struct pstat;
 
 // bio.c
 void            binit(void);
@@ -120,6 +121,9 @@ void            userinit(void);
 int             wait(void);
 void            wakeup(void*);
 void            yield(void);
+// CUSTOM
+void            setproctickets(int);
+int             fillpinfo(struct pstat*);            
 
 // swtch.S
 void            swtch(struct context**, struct context*);
diff --git a/proc.c b/proc.c
index 806b1b1..73dbd08 100644
--- a/proc.c
+++ b/proc.c
@@ -6,6 +6,8 @@
 #include "x86.h"
 #include "proc.h"
 #include "spinlock.h"
+#include "pstat.h"
+#include "random.c"
 
 struct {
   struct spinlock lock;
@@ -88,6 +90,8 @@ allocproc(void)
 found:
   p->state = EMBRYO;
   p->pid = nextpid++;
+  p->tickets = 1;
+  p->ticks = 0;
 
   release(&ptable.lock);
 
@@ -215,6 +219,8 @@ fork(void)
   acquire(&ptable.lock);
 
   np->state = RUNNABLE;
+  np->tickets = curproc->tickets; // set tickets number
+  np->ticks = 0; 
 
   release(&ptable.lock);
 
@@ -320,7 +326,7 @@ wait(void)
 //  - eventually that process transfers control
 //      via swtch back to the scheduler.
 void
-scheduler(void)
+original_scheduler(void)
 {
   struct proc *p;
   struct cpu *c = mycpu();
@@ -335,7 +341,8 @@ scheduler(void)
     for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
       if(p->state != RUNNABLE)
         continue;
-
+      // cprintf("Current process ticket %d, state %d, id %d\n", p->tickets, p->state, p->pid);
+      
       // Switch to chosen process.  It is the process's job
       // to release ptable.lock and then reacquire it
       // before jumping back to us.
@@ -349,12 +356,89 @@ scheduler(void)
       // Process is done running for now.
       // It should have changed its p->state before coming back.
       c->proc = 0;
+      // cprintf("Process returned and state %d and id %d\n", p->state, p->pid);
+
     }
     release(&ptable.lock);
+  }
+}
+
+int
+getrandom(int mod)
+{
+  return (next_random(mod-1))+1;
+}
+
+void
+scheduler(void)
+{
+  struct proc *p;
+  struct cpu *c = mycpu();
+  c->proc = 0;
+  
+  uint start_ticks;
+  int total_tickets, current_tickets, winner_ticket;
+
+  for(;;){
+    // Enable interrupts on this processor.
+    sti();
+
+    // get total number of tickets
+    acquire(&ptable.lock);
+    total_tickets=0; current_tickets=0;
+    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+      // cprintf("STATE is : %d\n", p->state);
+      if(p->state == RUNNABLE) total_tickets += p->tickets; 
+    }
+    if (total_tickets == 0) {
+      release(&ptable.lock);
+      continue;
+    } 
 
+    // get winner ticket
+    winner_ticket = getrandom(total_tickets);
+    // cprintf("Winner ticket : %d\n", winner_ticket);
+
+    // Loop over process table looking for process to run.
+    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+      if(p->state != RUNNABLE) continue;
+
+      current_tickets += p->tickets;
+      // cprintf("Current tickets : %d and current process ticket %d, state %d id %d\n", current_tickets, p->tickets, p->state, p->pid);
+      if(current_tickets >= winner_ticket){
+        // Switch to chosen process.  It is the process's job
+        // to release ptable.lock and then reacquire it
+        // before jumping back to us.
+        c->proc = p;
+        switchuvm(p);
+        p->state = RUNNING;
+
+        acquire(&tickslock);
+        start_ticks = ticks;
+        release(&tickslock);
+
+        swtch(&(c->scheduler), p->context);
+        
+        acquire(&tickslock);
+        p->ticks += (ticks - start_ticks);
+        release(&tickslock);
+        switchkvm();
+
+        // Process is done running for now.
+        // It should have changed its p->state before coming back.
+        c->proc = 0;
+        // cprintf("Process returned and state %d id %d\n", p->state, p->pid);
+
+        // now break to get new processor
+        break;
+      }
+      
+    }
+    release(&ptable.lock);
   }
 }
 
+
 // Enter scheduler.  Must hold only ptable.lock
 // and have changed proc->state. Saves and restores
 // intena because intena is a property of this
@@ -532,3 +616,38 @@ procdump(void)
     cprintf("\n");
   }
 }
+
+
+// custom
+void
+setproctickets(int number)
+{
+  acquire(&ptable.lock);
+  myproc()->tickets = number;
+  release(&ptable.lock);
+}
+
+
+int 
+fillpinfo(struct pstat* pt)
+{
+  acquire(&ptable.lock);
+  int no_p = 0, inuse=0;
+  struct proc *p;
+
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+    if(p->state != UNUSED) {
+      pt->inuse[no_p]=1;
+      inuse += 1;
+    }
+    else pt->inuse[no_p]=0;
+    pt->pid[no_p] = p->pid;
+    pt->ticks[no_p] = p->ticks; 
+    pt->tickets[no_p] = p->tickets;
+    no_p += 1;
+  }
+  
+  pt->num_processes = inuse; // TODO : delete this
+  release(&ptable.lock);
+  return 0;
+}
\ No newline at end of file
diff --git a/proc.h b/proc.h
index 1647114..ace27d0 100644
--- a/proc.h
+++ b/proc.h
@@ -49,6 +49,10 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+
+  // custom
+  int tickets;
+  int ticks;
 };
 
 // Process memory is laid out contiguously, low addresses first:
diff --git a/ps.c b/ps.c
new file mode 100644
index 0000000..b89d747
--- /dev/null
+++ b/ps.c
@@ -0,0 +1,24 @@
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+#include "pstat.h"
+#include "param.h"
+
+int main()
+{
+    struct pstat *pt = malloc (sizeof(struct pstat));
+    getpinfo(pt);
+    
+    // test random
+    printf(1, "Random gen : %d\n", getrand(132));
+    printf(1, "Random gen : %d\n", getrand(132));
+    printf(1, "Random gen : %d\n", getrand(132));
+
+    int i=0;
+    printf(1, "Inuse\tTickets\tID\tTicks\n");
+    for(i=0; i<NPROC; i++)
+    {
+        printf(1, "%d\t%d\t%d\t%d\n", pt->inuse[i], pt->tickets[i], pt->pid[i], pt->ticks[i]);
+    }
+    exit();
+}
\ No newline at end of file
diff --git a/pstat.h b/pstat.h
new file mode 100644
index 0000000..aa7f07e
--- /dev/null
+++ b/pstat.h
@@ -0,0 +1,14 @@
+#ifndef _PSTAT_H_
+#define _PSTAT_H_
+#include "param.h"
+
+struct pstat {
+  int num_processes; // TODO : delete this
+  int inuse[NPROC];   // whether this slot of the process table is in use (1 or 0)
+  int tickets[NPROC]; // the number of tickets this process has
+  int pid[NPROC];     // the PID of each process
+  int ticks[NPROC];   // the number of ticks each process has accumulated
+
+};
+
+#endif // _PSTAT_H_
\ No newline at end of file
diff --git a/random.c b/random.c
new file mode 100644
index 0000000..c08a1c1
--- /dev/null
+++ b/random.c
@@ -0,0 +1,91 @@
+/* Period parameters */  
+#define N 624
+#define M 397
+#define MATRIX_A 0x9908b0df   /* constant vector a */
+#define UPPER_MASK 0x80000000 /* most significant w-r bits */
+#define LOWER_MASK 0x7fffffff /* least significant r bits */
+
+/* Tempering parameters */   
+#define TEMPERING_MASK_B 0x9d2c5680
+#define TEMPERING_MASK_C 0xefc60000
+#define TEMPERING_SHIFT_U(y)  (y >> 11)
+#define TEMPERING_SHIFT_S(y)  (y << 7)
+#define TEMPERING_SHIFT_T(y)  (y << 15)
+#define TEMPERING_SHIFT_L(y)  (y >> 18)
+
+#define RAND_MAX 0x7fffffff
+
+static unsigned long mt[N]; /* the array for the state vector  */
+static int mti=N+1; /* mti==N+1 means mt[N] is not initialized */
+
+/* initializing the array with a NONZERO seed */
+void
+sgenrand(unsigned long seed)
+{
+    /* setting initial seeds to mt[N] using         */
+    /* the generator Line 25 of Table 1 in          */
+    /* [KNUTH 1981, The Art of Computer Programming */
+    /*    Vol. 2 (2nd Ed.), pp102]                  */
+    mt[0]= seed & 0xffffffff;
+    for (mti=1; mti<N; mti++)
+        mt[mti] = (69069 * mt[mti-1]) & 0xffffffff;
+}
+
+long /* for integer generation */
+genrand()
+{
+    unsigned long y;
+    static unsigned long mag01[2]={0x0, MATRIX_A};
+    /* mag01[x] = x * MATRIX_A  for x=0,1 */
+
+    if (mti >= N) { /* generate N words at one time */
+        int kk;
+
+        if (mti == N+1)   /* if sgenrand() has not been called, */
+            sgenrand(4357); /* a default initial seed is used   */
+
+        for (kk=0;kk<N-M;kk++) {
+            y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
+            mt[kk] = mt[kk+M] ^ (y >> 1) ^ mag01[y & 0x1];
+        }
+        for (;kk<N-1;kk++) {
+            y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
+            mt[kk] = mt[kk+(M-N)] ^ (y >> 1) ^ mag01[y & 0x1];
+        }
+        y = (mt[N-1]&UPPER_MASK)|(mt[0]&LOWER_MASK);
+        mt[N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1];
+
+        mti = 0;
+    }
+  
+    y = mt[mti++];
+    y ^= TEMPERING_SHIFT_U(y);
+    y ^= TEMPERING_SHIFT_S(y) & TEMPERING_MASK_B;
+    y ^= TEMPERING_SHIFT_T(y) & TEMPERING_MASK_C;
+    y ^= TEMPERING_SHIFT_L(y);
+
+    // Strip off uppermost bit because we want a long,
+    // not an unsigned long
+    return y & RAND_MAX;
+}
+
+// Assumes 0 <= max <= RAND_MAX
+// Returns in the half-open interval [0, max]
+long next_random(long max) {
+  unsigned long
+    // max <= RAND_MAX < ULONG_MAX, so this is okay.
+    num_bins = (unsigned long) max + 1,
+    num_rand = (unsigned long) RAND_MAX + 1,
+    bin_size = num_rand / num_bins,
+    defect   = num_rand % num_bins;
+
+  long x;
+  do {
+   x = genrand();
+  }
+  // This is carefully written not to overflow
+  while (num_rand - defect <= (unsigned long)x);
+
+  // Truncated division is intentional
+  return x/bin_size;
+}
\ No newline at end of file
diff --git a/syscall.c b/syscall.c
index ee85261..9fd1b92 100644
--- a/syscall.c
+++ b/syscall.c
@@ -103,6 +103,12 @@ extern int sys_unlink(void);
 extern int sys_wait(void);
 extern int sys_write(void);
 extern int sys_uptime(void);
+// CUSTOM
+extern int sys_settickets(void);
+extern int sys_gettickets(void);
+extern int sys_getpinfo(void);
+extern int sys_getrand(void);
+extern int sys_yield(void);
 
 static int (*syscalls[])(void) = {
 [SYS_fork]    sys_fork,
@@ -126,6 +132,12 @@ static int (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+// CUSTOM
+[SYS_settickets] sys_settickets,
+[SYS_gettickets] sys_gettickets,
+[SYS_getpinfo]   sys_getpinfo,
+[SYS_getrand]    sys_getrand,
+[SYS_yield]      sys_yield,
 };
 
 void
diff --git a/syscall.h b/syscall.h
index bc5f356..0cb56e0 100644
--- a/syscall.h
+++ b/syscall.h
@@ -20,3 +20,10 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+
+// CUSTOM
+#define SYS_settickets 22
+#define SYS_gettickets 23
+#define SYS_getpinfo   24 
+#define SYS_getrand    25
+#define SYS_yield      26
\ No newline at end of file
diff --git a/sysproc.c b/sysproc.c
index 0686d29..b2f6499 100644
--- a/sysproc.c
+++ b/sysproc.c
@@ -6,6 +6,7 @@
 #include "memlayout.h"
 #include "mmu.h"
 #include "proc.h"
+#include "pstat.h"
 
 int
 sys_fork(void)
@@ -89,3 +90,53 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+/////////////////////// CUSTOM ////////////////////
+int
+sys_settickets(void)
+{
+  int n;
+  argint(0, &n);
+  // return -1 if input < 1
+  if(n< 1)
+    return -1;
+
+  //cprintf("n is %d\n", n);
+  setproctickets(n);
+  return 0; // successful
+}
+
+
+int
+sys_gettickets(void)
+{
+  return myproc()->tickets;
+}
+
+
+int
+sys_getpinfo(void)
+{
+  struct pstat *pt;
+  if(argptr (0 , (void*)&pt ,sizeof(*pt)) < 0) return -1; 
+  return fillpinfo(pt);
+}
+
+
+int rand_y = 1320;
+int
+sys_getrand(void)
+{
+  //https://en.wikipedia.org/wiki/Linear_congruential_generator
+  int mod;
+  argint(0, &mod);
+
+  rand_y = ((23*rand_y + 120) % mod);
+  return rand_y+1;
+}
+
+void
+sys_yield(void)
+{
+  yield();
+}
\ No newline at end of file
diff --git a/testtickets.c b/testtickets.c
new file mode 100644
index 0000000..f4ebf71
--- /dev/null
+++ b/testtickets.c
@@ -0,0 +1,24 @@
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+
+int main()
+{
+    int pid;
+    printf(1, "Default tickets got was %d\n", gettickets()); // should be 1
+    settickets(100);  // now tickets should be 100
+    printf(1, "After change tickets got was %d\n", gettickets()); // should be 100
+    pid = fork();
+    // // child process
+    if(pid == 0)
+    {   
+        printf(1, "Child tickets got was %d\n", gettickets()); // should be 100
+        // exit();
+    }
+    else
+    {     
+        printf(1, "Parent tickets got was %d\n", gettickets()); // should be 100
+        wait();
+    }
+    exit();
+}
\ No newline at end of file
diff --git a/timewithtickets.c b/timewithtickets.c
new file mode 100644
index 0000000..0b78599
--- /dev/null
+++ b/timewithtickets.c
@@ -0,0 +1,131 @@
+#include "types.h"
+#include "user.h"
+#include "param.h"
+#include "pstat.h"
+
+#undef USE_YIELD
+#define MAX_CHILDREN 32
+#define LARGE_TICKET_COUNT 100000
+#define MAX_YIELDS_FOR_SETUP 500
+
+__attribute__((noreturn))
+void yield_forever() {
+    while (1) {
+        yield();
+    }
+}
+
+__attribute__((noreturn))
+void run_forever() {
+    while (1) {
+        __asm__("");
+    }
+}
+
+int spawn(int tickets) {
+    int pid = fork();
+    if (pid == 0) {
+        settickets(tickets);
+        yield();
+#ifdef USE_YIELD
+        yield_forever();
+#else
+        run_forever();
+#endif
+    } else if (pid != -1) {
+        return pid;
+    } else {
+        printf(2, "error in fork\n");
+        return -1;
+    }
+}
+
+int find_index_of_pid(int *list, int list_size, int pid) {
+    for (int i = 0; i < list_size; ++i) {
+        if (list[i] == pid)
+            return i;
+    }
+    return -1;
+}
+
+void wait_for_ticket_counts(int num_children, int *pids, int *tickets) {
+    for (int yield_count = 0; yield_count < MAX_YIELDS_FOR_SETUP; ++yield_count) {
+        yield();
+        int done = 1;
+        struct pstat info;
+        getpinfo(&info);
+        for (int i = 0; i < num_children; ++i) {
+            int index = find_index_of_pid(info.pid, info.num_processes, pids[i]);
+            if (info.tickets[index] != tickets[i]) done = 0;
+        }
+        if (done)
+            break;
+    }
+}
+
+int main(int argc, char *argv[])
+{
+    if (argc < 3) {
+        printf(2, "usage: %s seconds tickets1 tickets2 ... ticketsN\n"
+                  "       seconds is the number of time units to run for\n"
+                  "       ticketsX is the number of tickets to give to subprocess N\n",
+                  argv[0]);
+        exit();
+    }
+    int tickets_for[MAX_CHILDREN];
+    int active_pids[MAX_CHILDREN];
+    int num_seconds = atoi(argv[1]);
+    int num_children = argc - 2;
+    if (num_children > MAX_CHILDREN) {
+        printf(2, "only up to %d supported\n", MAX_CHILDREN);
+        exit();
+    }
+    /* give us a lot of ticket so we don't get starved */
+    settickets(LARGE_TICKET_COUNT);
+    for (int i = 0; i < num_children; ++i) {
+        int tickets = atoi(argv[i + 2]);
+        tickets_for[i] = tickets;
+        active_pids[i] = spawn(tickets);
+    }
+    wait_for_ticket_counts(num_children, active_pids, tickets_for);
+    struct pstat before, after;
+    before.num_processes = after.num_processes = -1;
+    getpinfo(&before);
+    sleep(num_seconds);
+    getpinfo(&after);
+    for (int i = 0; i < num_children; ++i) {
+        kill(active_pids[i]);
+    }
+    for (int i = 0; i < num_children; ++i) {
+        wait();
+    }
+    if (before.num_processes >= NPROC || after.num_processes >= NPROC) {
+        printf(2, "getpinfo's num_processes is greater than NPROC before parent slept\n");
+        return 1;
+    }
+    if (before.num_processes < 0 || after.num_processes < 0) {
+        printf(2, "getpinfo's num_processes is negative -- not changed by syscall?\n");
+        return 1;
+    }
+    printf(1, "TICKETS\tTICKS\n");
+    for (int i = 0; i < num_children; ++i) {
+        int before_index = find_index_of_pid(before.pid, before.num_processes, active_pids[i]);
+        int after_index = find_index_of_pid(after.pid, after.num_processes, active_pids[i]);
+        if (before_index == -1)
+            printf(2, "child %d did not exist for getpinfo before parent slept\n", i);
+        if (after_index == -1)
+            printf(2, "child %d did not exist for getpinfo after parent slept\n", i);
+        if (before_index == -1 || after_index == -1) {
+            printf(1, "%d\t--unknown--\n", tickets_for[i]);
+        } else {
+            if (before.tickets[before_index] != tickets_for[i]) {
+                printf(2, "child %d had wrong number of tickets in getpinfo before parent slept\n", i);
+            }
+            if (after.tickets[after_index] != tickets_for[i]) {
+                printf(2, "child %d had wrong number of tickets in getpinfo after parent slept\n", i);
+            }
+            printf(1, "%d\t%d\n", tickets_for[i], after.ticks[after_index] - before.ticks[before_index]);
+        }
+    }
+    exit();
+}
\ No newline at end of file
diff --git a/user.h b/user.h
index 4f99c52..8d99b77 100644
--- a/user.h
+++ b/user.h
@@ -1,5 +1,6 @@
 struct stat;
 struct rtcdate;
+struct pstat;
 
 // system calls
 int fork(void);
@@ -24,6 +25,13 @@ char* sbrk(int);
 int sleep(int);
 int uptime(void);
 
+// custom
+int settickets(int);
+int gettickets();
+int getpinfo(struct pstat*);
+int getrand(int modulus);
+void yield(void);
+
 // ulib.c
 int stat(const char*, struct stat*);
 char* strcpy(char*, const char*);
diff --git a/usys.S b/usys.S
index 8bfd8a1..73dde53 100644
--- a/usys.S
+++ b/usys.S
@@ -29,3 +29,8 @@ SYSCALL(getpid)
 SYSCALL(sbrk)
 SYSCALL(sleep)
 SYSCALL(uptime)
+SYSCALL(settickets)
+SYSCALL(gettickets)
+SYSCALL(getpinfo)
+SYSCALL(getrand)
+SYSCALL(yield)
\ No newline at end of file
