diff --git a/Makefile b/Makefile
index 09d790c..d92b314 100644
--- a/Makefile
+++ b/Makefile
@@ -52,6 +52,7 @@ endif
 
 # If the makefile can't find QEMU, specify its path here
 # QEMU = qemu-system-i386
+QEMU = qemu-system-x86_64 # needed to do this sudo apt-get install qemu-system-x86
 
 # Try to infer the correct QEMU
 ifndef QEMU
@@ -181,6 +182,10 @@ UPROGS=\
 	_usertests\
 	_wc\
 	_zombie\
+	_testtickets\
+	_testpinfo\
+	_timewithtickets\
+	_lotterytest\
 
 fs.img: mkfs README $(UPROGS)
 	./mkfs fs.img README $(UPROGS)
@@ -217,7 +222,7 @@ QEMUGDB = $(shell if $(QEMU) -help | grep -q '^-gdb'; \
 	then echo "-gdb tcp::$(GDBPORT)"; \
 	else echo "-s -p $(GDBPORT)"; fi)
 ifndef CPUS
-CPUS := 2
+CPUS := 1 # 2 originally but 1 for offlines
 endif
 QEMUOPTS = -drive file=fs.img,index=1,media=disk,format=raw -drive file=xv6.img,index=0,media=disk,format=raw -smp $(CPUS) -m 512 $(QEMUEXTRA)
 
@@ -251,6 +256,7 @@ EXTRA=\
 	mkfs.c ulib.c user.h cat.c echo.c forktest.c grep.c kill.c\
 	ln.c ls.c mkdir.c rm.c stressfs.c usertests.c wc.c zombie.c\
 	printf.c umalloc.c\
+	testtickets.c testpinfo.c timewithtickets.c lotterytest.c\
 	README dot-bochsrc *.pl toc.* runoff runoff1 runoff.list\
 	.gdbinit.tmpl gdbutil\
 
diff --git a/defs.h b/defs.h
index 82fb982..6189b15 100644
--- a/defs.h
+++ b/defs.h
@@ -9,6 +9,7 @@ struct spinlock;
 struct sleeplock;
 struct stat;
 struct superblock;
+struct pstat;
 
 // bio.c
 void            binit(void);
@@ -120,6 +121,9 @@ void            userinit(void);
 int             wait(void);
 void            wakeup(void*);
 void            yield(void);
+// CUSTOM
+void            setproctickets(int);
+int             fillpinfo(struct pstat*);            
 
 // swtch.S
 void            swtch(struct context**, struct context*);
diff --git a/proc.c b/proc.c
index 806b1b1..091e776 100644
--- a/proc.c
+++ b/proc.c
@@ -6,6 +6,8 @@
 #include "x86.h"
 #include "proc.h"
 #include "spinlock.h"
+#include "pstat.h"
+#include "random.c"
 
 struct {
   struct spinlock lock;
@@ -88,6 +90,8 @@ allocproc(void)
 found:
   p->state = EMBRYO;
   p->pid = nextpid++;
+  p->tickets = 1;
+  p->ticks = 0;
 
   release(&ptable.lock);
 
@@ -215,6 +219,8 @@ fork(void)
   acquire(&ptable.lock);
 
   np->state = RUNNABLE;
+  np->tickets = curproc->tickets; // set tickets number
+  np->ticks = 0; 
 
   release(&ptable.lock);
 
@@ -320,7 +326,7 @@ wait(void)
 //  - eventually that process transfers control
 //      via swtch back to the scheduler.
 void
-scheduler(void)
+modified_scheduler(void)
 {
   struct proc *p;
   struct cpu *c = mycpu();
@@ -335,7 +341,8 @@ scheduler(void)
     for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
       if(p->state != RUNNABLE)
         continue;
-
+      // cprintf("Current process ticket %d, state %d, id %d\n", p->tickets, p->state, p->pid);
+      
       // Switch to chosen process.  It is the process's job
       // to release ptable.lock and then reacquire it
       // before jumping back to us.
@@ -349,12 +356,92 @@ scheduler(void)
       // Process is done running for now.
       // It should have changed its p->state before coming back.
       c->proc = 0;
+      // cprintf("Process returned and state %d and id %d\n", p->state, p->pid);
+
     }
     release(&ptable.lock);
+  }
+}
+
+int rand_x = 1320;
+int
+getrandom(int mod)
+{
+  //https://en.wikipedia.org/wiki/Linear_congruential_generator
+  // rand_x = ((23*rand_x + 120) % mod);
+  
+  // https://www.cs.virginia.edu/~cr4bd/4414/S2019/files/lcg_parkmiller_c.txt
+  rand_x = next_random() % mod; 
+  return rand_x+1;
+}
 
+void
+scheduler(void)
+{
+  struct proc *p;
+  struct cpu *c = mycpu();
+  c->proc = 0;
+  
+  uint start_ticks;
+  int total_tickets, current_tickets, winner_ticket;
+
+  for(;;){
+    // Enable interrupts on this processor.
+    sti();
+
+    // get total number of tickets
+    acquire(&ptable.lock);
+    // TODO : if this is intialized as 0 then there is a lock problem
+    total_tickets=0; current_tickets=0;
+    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+      // TODO : need runnable? 
+      // TODO : need lock?
+      // cprintf("STATE is : %d\n", p->state);
+      if(p->state == RUNNABLE) total_tickets += p->tickets; 
+    }
+    if (total_tickets == 0) {
+      release(&ptable.lock);
+      continue;
+    } 
+
+    // get winner ticket
+    winner_ticket = getrandom(total_tickets);
+    // cprintf("Winner ticket : %d\n", winner_ticket);
+
+    // Loop over process table looking for process to run.
+    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+      if(p->state != RUNNABLE) continue;
+
+      current_tickets += p->tickets;
+      // cprintf("Current tickets : %d and current process ticket %d, state %d id %d\n", current_tickets, p->tickets, p->state, p->pid);
+      if(current_tickets >= winner_ticket){
+        start_ticks = ticks;
+        // Switch to chosen process.  It is the process's job
+        // to release ptable.lock and then reacquire it
+        // before jumping back to us.
+        c->proc = p;
+        switchuvm(p);
+        p->state = RUNNING;
+
+        swtch(&(c->scheduler), p->context);
+        switchkvm();
+
+        // Process is done running for now.
+        // It should have changed its p->state before coming back.
+        c->proc = 0;
+        p->ticks += (ticks - start_ticks);
+        // cprintf("Process returned and state %d id %d\n", p->state, p->pid);
+
+        // now break to get new processor
+        break;
+      }
+      
+    }
+    release(&ptable.lock);
   }
 }
 
+
 // Enter scheduler.  Must hold only ptable.lock
 // and have changed proc->state. Saves and restores
 // intena because intena is a property of this
@@ -532,3 +619,35 @@ procdump(void)
     cprintf("\n");
   }
 }
+
+
+// custom
+void
+setproctickets(int number)
+{
+  acquire(&ptable.lock);
+  myproc()->tickets = number;
+  release(&ptable.lock);
+}
+
+
+int 
+fillpinfo(struct pstat* pt)
+{
+  acquire(&ptable.lock);
+  int no_p = 0;
+  struct proc *p;
+
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+    pt->inuse[no_p] = 1;
+    if(p->state == UNUSED) continue; //pt->inuse[no_p] = 0;
+    pt->pid[no_p] = p->pid;
+    pt->ticks[no_p] = p->ticks; 
+    pt->tickets[no_p] = p->tickets;
+    no_p += 1;
+  }
+  
+  pt->num_processes = no_p; // TODO : delete this
+  release(&ptable.lock);
+  return 0;
+}
\ No newline at end of file
diff --git a/proc.h b/proc.h
index 1647114..ace27d0 100644
--- a/proc.h
+++ b/proc.h
@@ -49,6 +49,10 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+
+  // custom
+  int tickets;
+  int ticks;
 };
 
 // Process memory is laid out contiguously, low addresses first:
diff --git a/syscall.c b/syscall.c
index ee85261..9fd1b92 100644
--- a/syscall.c
+++ b/syscall.c
@@ -103,6 +103,12 @@ extern int sys_unlink(void);
 extern int sys_wait(void);
 extern int sys_write(void);
 extern int sys_uptime(void);
+// CUSTOM
+extern int sys_settickets(void);
+extern int sys_gettickets(void);
+extern int sys_getpinfo(void);
+extern int sys_getrand(void);
+extern int sys_yield(void);
 
 static int (*syscalls[])(void) = {
 [SYS_fork]    sys_fork,
@@ -126,6 +132,12 @@ static int (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+// CUSTOM
+[SYS_settickets] sys_settickets,
+[SYS_gettickets] sys_gettickets,
+[SYS_getpinfo]   sys_getpinfo,
+[SYS_getrand]    sys_getrand,
+[SYS_yield]      sys_yield,
 };
 
 void
diff --git a/syscall.h b/syscall.h
index bc5f356..0cb56e0 100644
--- a/syscall.h
+++ b/syscall.h
@@ -20,3 +20,10 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+
+// CUSTOM
+#define SYS_settickets 22
+#define SYS_gettickets 23
+#define SYS_getpinfo   24 
+#define SYS_getrand    25
+#define SYS_yield      26
\ No newline at end of file
diff --git a/sysproc.c b/sysproc.c
index 0686d29..b2f6499 100644
--- a/sysproc.c
+++ b/sysproc.c
@@ -6,6 +6,7 @@
 #include "memlayout.h"
 #include "mmu.h"
 #include "proc.h"
+#include "pstat.h"
 
 int
 sys_fork(void)
@@ -89,3 +90,53 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+/////////////////////// CUSTOM ////////////////////
+int
+sys_settickets(void)
+{
+  int n;
+  argint(0, &n);
+  // return -1 if input < 1
+  if(n< 1)
+    return -1;
+
+  //cprintf("n is %d\n", n);
+  setproctickets(n);
+  return 0; // successful
+}
+
+
+int
+sys_gettickets(void)
+{
+  return myproc()->tickets;
+}
+
+
+int
+sys_getpinfo(void)
+{
+  struct pstat *pt;
+  if(argptr (0 , (void*)&pt ,sizeof(*pt)) < 0) return -1; 
+  return fillpinfo(pt);
+}
+
+
+int rand_y = 1320;
+int
+sys_getrand(void)
+{
+  //https://en.wikipedia.org/wiki/Linear_congruential_generator
+  int mod;
+  argint(0, &mod);
+
+  rand_y = ((23*rand_y + 120) % mod);
+  return rand_y+1;
+}
+
+void
+sys_yield(void)
+{
+  yield();
+}
\ No newline at end of file
diff --git a/user.h b/user.h
index 4f99c52..8d99b77 100644
--- a/user.h
+++ b/user.h
@@ -1,5 +1,6 @@
 struct stat;
 struct rtcdate;
+struct pstat;
 
 // system calls
 int fork(void);
@@ -24,6 +25,13 @@ char* sbrk(int);
 int sleep(int);
 int uptime(void);
 
+// custom
+int settickets(int);
+int gettickets();
+int getpinfo(struct pstat*);
+int getrand(int modulus);
+void yield(void);
+
 // ulib.c
 int stat(const char*, struct stat*);
 char* strcpy(char*, const char*);
diff --git a/usys.S b/usys.S
index 8bfd8a1..73dde53 100644
--- a/usys.S
+++ b/usys.S
@@ -29,3 +29,8 @@ SYSCALL(getpid)
 SYSCALL(sbrk)
 SYSCALL(sleep)
 SYSCALL(uptime)
+SYSCALL(settickets)
+SYSCALL(gettickets)
+SYSCALL(getpinfo)
+SYSCALL(getrand)
+SYSCALL(yield)
\ No newline at end of file
