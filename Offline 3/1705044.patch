diff --git a/Makefile b/Makefile
index 09d790c..d92b314 100644
--- a/Makefile
+++ b/Makefile
@@ -52,6 +52,7 @@ endif
 
 # If the makefile can't find QEMU, specify its path here
 # QEMU = qemu-system-i386
+QEMU = qemu-system-x86_64 # needed to do this sudo apt-get install qemu-system-x86
 
 # Try to infer the correct QEMU
 ifndef QEMU
@@ -181,6 +182,10 @@ UPROGS=\
 	_usertests\
 	_wc\
 	_zombie\
+	_testtickets\
+	_testpinfo\
+	_timewithtickets\
+	_lotterytest\
 
 fs.img: mkfs README $(UPROGS)
 	./mkfs fs.img README $(UPROGS)
@@ -217,7 +222,7 @@ QEMUGDB = $(shell if $(QEMU) -help | grep -q '^-gdb'; \
 	then echo "-gdb tcp::$(GDBPORT)"; \
 	else echo "-s -p $(GDBPORT)"; fi)
 ifndef CPUS
-CPUS := 2
+CPUS := 1 # 2 originally but 1 for offlines
 endif
 QEMUOPTS = -drive file=fs.img,index=1,media=disk,format=raw -drive file=xv6.img,index=0,media=disk,format=raw -smp $(CPUS) -m 512 $(QEMUEXTRA)
 
@@ -251,6 +256,7 @@ EXTRA=\
 	mkfs.c ulib.c user.h cat.c echo.c forktest.c grep.c kill.c\
 	ln.c ls.c mkdir.c rm.c stressfs.c usertests.c wc.c zombie.c\
 	printf.c umalloc.c\
+	testtickets.c testpinfo.c timewithtickets.c lotterytest.c\
 	README dot-bochsrc *.pl toc.* runoff runoff1 runoff.list\
 	.gdbinit.tmpl gdbutil\
 
diff --git a/defs.h b/defs.h
index 82fb982..6189b15 100644
--- a/defs.h
+++ b/defs.h
@@ -9,6 +9,7 @@ struct spinlock;
 struct sleeplock;
 struct stat;
 struct superblock;
+struct pstat;
 
 // bio.c
 void            binit(void);
@@ -120,6 +121,9 @@ void            userinit(void);
 int             wait(void);
 void            wakeup(void*);
 void            yield(void);
+// CUSTOM
+void            setproctickets(int);
+int             fillpinfo(struct pstat*);            
 
 // swtch.S
 void            swtch(struct context**, struct context*);
diff --git a/lotterytest.c b/lotterytest.c
new file mode 100644
index 0000000..7ac96a4
--- /dev/null
+++ b/lotterytest.c
@@ -0,0 +1,506 @@
+#include "types.h"
+#include "mmu.h"
+#include "param.h"
+#include "proc.h"
+#include "user.h"
+#include "pstat.h"
+
+#define MAX_CHILDREN 32
+
+typedef void (*function_type)(void);
+
+struct test_case {
+    const char *name;
+    int total_tests;
+    int errors;
+    int num_children;
+    int tickets[MAX_CHILDREN];
+    int expect_ticks_unscaled[MAX_CHILDREN];
+    int actual_ticks[MAX_CHILDREN];
+    int total_actual_ticks;
+    function_type functions[MAX_CHILDREN];
+};
+
+void yield_forever();
+void run_forever();
+void iowait_forever();
+void exit_fast();
+
+struct test_case tests[] = {
+    {
+        .name = "one process",
+        .num_children = 1,
+        .tickets[0] = 1000,
+        .expect_ticks_unscaled[0] = 1,
+        .functions[0] = yield_forever
+    },
+    {
+        .name = "two processes, unequal ratio",
+        .num_children = 2,
+        .tickets[0] = 1000,
+        .tickets[1] = 2000,
+        .expect_ticks_unscaled[0] = 1,
+        .expect_ticks_unscaled[1] = 2,
+        .functions[0] = yield_forever,
+        .functions[1] = yield_forever,
+    },
+    {
+        .name = "two processes, unequal ratio, small ticket count",
+        .num_children = 2,
+        .tickets[0] = 1,
+        .tickets[1] = 2,
+        .expect_ticks_unscaled[0] = 1,
+        .expect_ticks_unscaled[1] = 2,
+        .functions[0] = yield_forever,
+        .functions[1] = yield_forever,
+    },
+    {
+        .name = "two processes, equal",
+        .num_children = 2,
+        .tickets[0] = 1000,
+        .tickets[1] = 1000,
+        .expect_ticks_unscaled[0] = 1,
+        .expect_ticks_unscaled[1] = 1,
+        .functions[0] = yield_forever,
+        .functions[1] = yield_forever,
+    },
+    {
+        .name = "two processes, equal, small ticket count",
+        .num_children = 2,
+        .tickets[0] = 1,
+        .tickets[1] = 1,
+        .expect_ticks_unscaled[0] = 1,
+        .expect_ticks_unscaled[1] = 1,
+        .functions[0] = yield_forever,
+        .functions[1] = yield_forever,
+    },
+    {
+        .name = "three processes, unequal",
+        .num_children = 3,
+        .tickets[0] = 500,
+        .tickets[1] = 1000,
+        .tickets[2] = 1750,
+        .expect_ticks_unscaled[0] =  50,
+        .expect_ticks_unscaled[1] = 100,
+        .expect_ticks_unscaled[2] = 175,
+        .functions[0] = yield_forever,
+        .functions[1] = yield_forever,
+        .functions[2] = yield_forever,
+    },
+    {
+        .name = "three processes, unequal, small ticket count",
+        .num_children = 3,
+        .tickets[0] = 2,
+        .tickets[1] = 3,
+        .tickets[2] = 4,
+        .expect_ticks_unscaled[0] = 2,
+        .expect_ticks_unscaled[1] = 3,
+        .expect_ticks_unscaled[2] = 4,
+        .functions[0] = yield_forever,
+        .functions[1] = yield_forever,
+        .functions[2] = yield_forever,
+    },
+    {
+        .name = "three processes, but one io-wait",
+        .num_children = 3,
+        .tickets[0] = 500,
+        .tickets[1] = 1000,
+        .tickets[2] = 1750,
+        .expect_ticks_unscaled[0] =  50,
+        .expect_ticks_unscaled[1] = 100,
+        .expect_ticks_unscaled[2] =   0,
+        .functions[0] = yield_forever,
+        .functions[1] = yield_forever,
+        .functions[2] = iowait_forever,
+    },
+    {
+        .name = "three processes, but one exits",
+        .num_children = 3,
+        .tickets[0] = 500,
+        .tickets[1] = 1000,
+        .tickets[2] = 1750,
+        .expect_ticks_unscaled[0] =  50,
+        .expect_ticks_unscaled[1] = 100,
+        .expect_ticks_unscaled[2] =   0,
+        .functions[0] = yield_forever,
+        .functions[1] = yield_forever,
+        .functions[2] = exit_fast,
+    },
+    {
+        .name = "seven procceses",
+        .num_children = 7,
+        .tickets[0] = 50,
+        .tickets[1] = 60,
+        .tickets[2] = 70,
+        .tickets[3] = 80,
+        .tickets[4] = 90,
+        .tickets[5] = 100,
+        .tickets[6] = 110,
+        .expect_ticks_unscaled[0] =  50,
+        .expect_ticks_unscaled[1] =  60,
+        .expect_ticks_unscaled[2] =  70,
+        .expect_ticks_unscaled[3] =  80,
+        .expect_ticks_unscaled[4] =  90,
+        .expect_ticks_unscaled[5] = 100,
+        .expect_ticks_unscaled[6] = 110,
+        .functions[0] = yield_forever,
+        .functions[1] = yield_forever,
+        .functions[2] = yield_forever,
+        .functions[3] = yield_forever,
+        .functions[4] = yield_forever,
+        .functions[5] = yield_forever,
+        .functions[6] = yield_forever,
+    },
+    {
+        .name = "two processes, not all yielding",
+        .num_children = 2,
+        .tickets[0] = 50,
+        .tickets[1] = 200,
+        .expect_ticks_unscaled[0] =  50,
+        .expect_ticks_unscaled[1] =  200,
+        .functions[0] = yield_forever,
+        .functions[1] = run_forever,
+    },
+    { .name = 0, }
+};
+
+
+#define LARGE_TICKET_COUNT 100000
+#define NOT_AS_LARGE_TICKET_COUNT 10000
+#define MAX_YIELDS_FOR_SETUP 100
+#define WARMUP_TIME 5
+#define SLEEP_TIME 50
+
+__attribute__((noreturn))
+void yield_forever() {
+    while (1) {
+        yield();
+    }
+}
+
+__attribute__((noreturn))
+void run_forever() {
+    while (1) {
+        __asm__("");
+    }
+}
+
+__attribute__((noreturn))
+void iowait_forever() {
+    int fds[2];
+    pipe(fds);
+    while (1) {
+        char temp[1];
+        read(fds[0], temp, 0);
+    }
+}
+
+__attribute__((noreturn))
+void exit_fast() {
+    exit();
+}
+
+
+int spawn(int tickets, function_type function) {
+    int pid = fork();
+    if (pid == 0) {
+        settickets(tickets);
+        yield();
+        (*function)();
+        exit();
+    } else if (pid != -1) {
+        return pid;
+    } else {
+        printf(2, "error in fork\n");
+        return -1;
+    }
+}
+
+int find_index_of_pid(int *list, int list_size, int pid) {
+    for (int i = 0; i < list_size; ++i) {
+        if (list[i] == pid)
+            return i;
+    }
+    return -1;
+}
+
+void wait_for_ticket_counts(int num_children, int *pids, int *tickets) {
+    /* temporarily lower our share to give other processes more of a chance to run
+     * their settickets() call */
+    settickets(NOT_AS_LARGE_TICKET_COUNT);
+    for (int yield_count = 0; yield_count < MAX_YIELDS_FOR_SETUP; ++yield_count) {
+        yield();
+        int done = 1;
+        struct pstat info;
+        getpinfo(&info);
+        for (int i = 0; i < num_children; ++i) {
+            int index = find_index_of_pid(info.pid, info.num_processes, pids[i]);
+            if (info.tickets[index] != tickets[i]) done = 0;
+        }
+        if (done)
+            break;
+    }
+    settickets(LARGE_TICKET_COUNT);
+}
+
+void check(struct test_case* test, int passed_p, const char *description) {
+    test->total_tests++;
+    if (!passed_p) {
+        test->errors++;
+        printf(1, "*** TEST FAILURE: for scenario '%s': %s\n", test->name, description);
+    }
+}
+
+void execute_and_get_info(
+        struct test_case* test, int *pids,
+        struct pstat *before,
+        struct pstat *after) {
+    settickets(LARGE_TICKET_COUNT);
+    for (int i = 0; i < test->num_children; ++i) {
+        pids[i] = spawn(test->tickets[i], test->functions[i]);
+    }
+    wait_for_ticket_counts(test->num_children, pids, test->tickets);
+    before->num_processes = after->num_processes = -1;
+    sleep(WARMUP_TIME);
+    getpinfo(before);
+    sleep(SLEEP_TIME);
+    getpinfo(after);
+    for (int i = 0; i < test->num_children; ++i) {
+        kill(pids[i]);
+    }
+    for (int i = 0; i < test->num_children; ++i) {
+        wait();
+    }
+}
+
+void count_ticks(
+        struct test_case *test, int *pids,
+        struct pstat *before,
+        struct pstat *after) {
+    test->total_actual_ticks = 0;
+    for (int i = 0; i < test->num_children; ++i) {
+        int before_index = find_index_of_pid(before->pid, before->num_processes, pids[i]);
+        int after_index = find_index_of_pid(after->pid, after->num_processes, pids[i]);
+        check(test,
+              before_index >= 0 && after_index >= 0,
+              "subprocess's pid appeared in getprocessesinfo output");
+        if (before_index >= 0 && after_index >= 0) {
+            check(test,
+                  test->tickets[i] == before->tickets[before_index] &&
+                  test->tickets[i] == after->tickets[after_index],
+                  "subprocess assigned correct number of tickets");
+            test->actual_ticks[i] = after->ticks[after_index] - before->ticks[before_index];
+            test->total_actual_ticks += test->actual_ticks[i];
+        } else {
+            test->actual_ticks[i] = -99999; // obviously bogus count that will fail checks later
+        }
+    }
+}
+
+void dump_test_timings(struct test_case *test) {
+    printf(1, "-----------------------------------------\n");
+    printf(1, "%s expected ticks ratios and observations\n", test->name);
+    printf(1, "#\texpect\tobserve\t(description)\n");
+    for (int i = 0; i < test->num_children; ++i) {
+        const char *assigned_function = "(unknown)";
+        if (test->functions[i] == yield_forever) {
+            assigned_function = "yield_forever";
+        } else if (test->functions[i] == run_forever) {
+            assigned_function = "run_forever";
+        } else if (test->functions[i] == iowait_forever) {
+            assigned_function = "iowait_forever";
+        } else if (test->functions[i] == exit_fast) {
+            assigned_function = "exit_fast";
+        }
+        printf(1, "%d\t%d\t%d\t(assigned %d tickets; running %s)\n",
+            i,
+            test->expect_ticks_unscaled[i],
+            test->actual_ticks[i],
+            test->tickets[i],
+            assigned_function);
+    }
+    printf(1, "\nNOTE: the 'expect' values above represent the expected\n"
+              "      ratio of ticks between the processes. So, to compare\n"
+              "      them to the observations by hand, multiply each expected\n"
+              "      value by (sum of observed)/(sum of expected)\n");
+    printf(1, "-----------------------------------------\n");
+}
+
+/* The comapre_ticks() code tries to do a Chi-squared test.
+   
+   Since we can't use floating point in xv6, calculations are done in fixed point.
+*/
+#define FIXED_POINT_BASE (1<<10)
+#define FIXED_POINT_COUNT 10
+
+/* chi-squared thresholds for a p-value of 0.001,
+   for 1, 2, ..., 10 degrees of freedom
+ */
+const int chi_squared_thresholds[] = {
+    FIXED_POINT_BASE / 100 * 1083,
+    FIXED_POINT_BASE / 100 * 1382,
+    FIXED_POINT_BASE / 100 * 1627,
+    FIXED_POINT_BASE / 100 * 1847,
+    FIXED_POINT_BASE / 100 * 2052,
+    FIXED_POINT_BASE / 100 * 2246,
+    FIXED_POINT_BASE / 100 * 2432,
+    FIXED_POINT_BASE / 100 * 2612,
+    FIXED_POINT_BASE / 100 * 2788,
+    FIXED_POINT_BASE / 100 * 2959,
+};
+
+int compare_ticks_chi_squared(struct test_case *test) {
+    if (test->num_children < 2) {
+        return 1;
+    }
+    int expect_ticks_total = 0;
+    for (int i = 0; i < test->num_children; ++i) {
+        expect_ticks_total += test->expect_ticks_unscaled[i];
+    }
+    /*
+       compute the expected number of ticks for each child given the total number
+       (in fixed point, so the rounding isn't so extreme.
+
+       then, use this to compute the chi-squared test statistic:
+        
+        sum( (observed - expected)^2 / expected )
+    
+       then compare this to our table of thresholds on the chi-squared distribution for
+       the appropriate degree of freedom
+
+       as a special case, we simply ignore columns for which we expect 0 items, except
+       that other columns are computed based on the portion of the actual total number of
+       ticks.
+
+       a better solution would be to use a statistical test that can handle this case,
+       like Fisher's exact test.
+    */
+    int delta = 0;
+    int skipped = 0;
+    for (int i = 0; i < test->num_children; ++i) {
+        int scaled_expected = (test->expect_ticks_unscaled[i] << FIXED_POINT_COUNT) / expect_ticks_total
+                             * test->total_actual_ticks;
+
+        // printf(1, "%d / %d * %d  = %d ", test->expect_ticks_unscaled[i] << FIXED_POINT_COUNT, expect_ticks_total, test->total_actual_ticks, scaled_expected);
+        
+#ifdef DEBUG
+        printf(1, "scaled %d to %d for ratio %d:%d\n",
+            test->expect_ticks_unscaled[i],
+            (int)(scaled_expected >> FIXED_POINT_COUNT),
+            (int) expect_ticks_total,
+            test->total_actual_ticks);
+#endif
+        if (scaled_expected == 0) {
+            ++skipped;
+            continue;
+        }
+        int cur_delta = scaled_expected - (test->actual_ticks[i] << FIXED_POINT_COUNT);
+#ifdef DEBUG
+        printf(1, "raw delta is is %x/%x\n", (int) cur_delta, (int) (cur_delta >> 32));
+        printf(1, "raw delta rounded is is %x\n", (int) (cur_delta >> FIXED_POINT_COUNT));
+#endif
+        cur_delta *= cur_delta;
+#ifdef DEBUG
+        if (cur_delta <= 0LL) {
+            printf(1, "delta is negative???\n");
+        }
+#endif
+        // cur_delta >>= FIXED_POINT_COUNT; // skipped because cancelled out by future shift back
+#ifdef DEBUG
+        printf(1, "delta before division [raw]     %x/%x\n", (int) cur_delta, (int) (cur_delta >> 32));
+        printf(1, "delta before division [rounded] %d\n", (int) (cur_delta >> FIXED_POINT_COUNT));
+#endif
+        if (scaled_expected > 0) {
+            // cur_delta <<= FIXED_POINT_COUNT;
+            cur_delta /= scaled_expected;
+        } else {
+            /* a huge number to make sure statistical test fails */
+            cur_delta = FIXED_POINT_BASE * 100000LL;
+        }
+#ifdef DEBUG
+        printf(1, "cur_delta = %x/%x\n", (int) cur_delta, (int) (cur_delta >> 32));
+#endif
+        delta += cur_delta;
+    }
+#ifdef DEBUG
+    printf(1, "%s test statistic %d (rounded)\n", test->name, (int) ((delta + FIXED_POINT_BASE / 2) >> FIXED_POINT_COUNT));
+#endif
+    int degrees_of_freedom = test->num_children - 1 - skipped;
+    int expected_value = chi_squared_thresholds[degrees_of_freedom - 1];
+    int passed_threshold = delta < expected_value;
+    check(test, passed_threshold,
+          "distribution of ticks run passed chi-squared test "
+          "for being same as expected");
+    if (!passed_threshold) {
+        dump_test_timings(test);
+    }
+    check(test, test->total_actual_ticks > 10,
+          "experiment ran for a non-trivial number of ticks");
+    return passed_threshold;
+}
+
+/* rather than doing a proper statistical test, make sure
+   the results are within +/-20% +/- 10.
+
+   (The extra +/- 10 is to handle cases where things run for a small
+   number of ticks.)
+
+   This hopefully will detect cases where a biased random
+   number generator is in use but otherwise the implementation
+   is generally okay.
+ */
+void compare_ticks_naive(struct test_case *test) {
+    if (test->num_children < 2) {
+        return;
+    }
+    int expect_ticks_total = 0;
+    for (int i = 0; i < test->num_children; ++i) {
+        expect_ticks_total += test->expect_ticks_unscaled[i];
+    }
+    int failed_any = 0;
+    for (int i = 0; i < test->num_children; ++i) {
+        int scaled_expected = ((int) test->expect_ticks_unscaled[i] * test->total_actual_ticks) / expect_ticks_total;
+        printf(1, "%d * %d / %d  = %d ", test->expect_ticks_unscaled[i], test->total_actual_ticks, expect_ticks_total, scaled_expected);
+        int max_expected = scaled_expected * 11 / 10 + 10;
+        int min_expected = scaled_expected * 9 / 10 - 10;
+        int in_range = (test->actual_ticks[i] >= min_expected && test->actual_ticks[i] <= max_expected);
+        if (!in_range) {
+            failed_any = 1;
+        }
+    }
+    check(test, !failed_any, "tick counts within +/- 10% or +/- 10 of expected");
+    if (!failed_any) {
+        printf(1, "*** %s failed chi-squared test, but was w/in 10% of expected\n", test->name);
+        printf(1, "*** a likely cause is bias in random number generation\n");
+    }
+}
+
+void run_test_case(struct test_case* test) {
+    int pids[MAX_CHILDREN];
+    test->total_tests = test->errors = 0;
+    struct pstat before, after;
+    execute_and_get_info(test, pids, &before, &after);
+    check(test, 
+          before.num_processes < NPROC && after.num_processes < NPROC &&
+          before.num_processes > test->num_children && after.num_processes > test->num_children,
+          "getprocessesinfo returned a reasonable number of processes");
+    count_ticks(test, pids, &before, &after);
+    if (!compare_ticks_chi_squared(test)) {
+        compare_ticks_naive(test);
+    }
+    printf(1, "%s: passed %d of %d\n", test->name, test->total_tests - test->errors, test->total_tests);
+}
+
+int main(int argc, char *argv[])
+{
+    int total_tests = 0;
+    int passed_tests = 0;
+    for (int i = 0; tests[i].name; ++i) {
+        struct test_case *test = &tests[i];
+        run_test_case(test);
+        total_tests += test->total_tests;
+        passed_tests += test->total_tests - test->errors;
+    }
+    printf(1, "overall: passed %d of %d\n", passed_tests, total_tests);
+    exit();
+}
diff --git a/proc.c b/proc.c
index 806b1b1..8a74f18 100644
--- a/proc.c
+++ b/proc.c
@@ -6,6 +6,8 @@
 #include "x86.h"
 #include "proc.h"
 #include "spinlock.h"
+#include "pstat.h"
+#include "random.c"
 
 struct {
   struct spinlock lock;
@@ -88,6 +90,8 @@ allocproc(void)
 found:
   p->state = EMBRYO;
   p->pid = nextpid++;
+  p->tickets = 1;
+  p->ticks = 0;
 
   release(&ptable.lock);
 
@@ -215,6 +219,8 @@ fork(void)
   acquire(&ptable.lock);
 
   np->state = RUNNABLE;
+  np->tickets = curproc->tickets; // set tickets number
+  np->ticks = 0; 
 
   release(&ptable.lock);
 
@@ -320,7 +326,7 @@ wait(void)
 //  - eventually that process transfers control
 //      via swtch back to the scheduler.
 void
-scheduler(void)
+original_scheduler(void)
 {
   struct proc *p;
   struct cpu *c = mycpu();
@@ -335,7 +341,8 @@ scheduler(void)
     for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
       if(p->state != RUNNABLE)
         continue;
-
+      // cprintf("Current process ticket %d, state %d, id %d\n", p->tickets, p->state, p->pid);
+      
       // Switch to chosen process.  It is the process's job
       // to release ptable.lock and then reacquire it
       // before jumping back to us.
@@ -349,12 +356,98 @@ scheduler(void)
       // Process is done running for now.
       // It should have changed its p->state before coming back.
       c->proc = 0;
+      // cprintf("Process returned and state %d and id %d\n", p->state, p->pid);
+
     }
     release(&ptable.lock);
+  }
+}
+
+int rand_x = 1320;
+int
+getrandom(int mod)
+{
+  //https://en.wikipedia.org/wiki/Linear_congruential_generator
+  // rand_x = ((23*rand_x + 120) % mod);
+  
+  // https://www.cs.virginia.edu/~cr4bd/4414/S2019/files/lcg_parkmiller_c.txt
+  rand_x = next_random() % mod; 
+  return rand_x+1;
+}
 
+void
+scheduler(void)
+{
+  struct proc *p;
+  struct cpu *c = mycpu();
+  c->proc = 0;
+  
+  uint start_ticks;
+  int total_tickets, current_tickets, winner_ticket;
+
+  for(;;){
+    // Enable interrupts on this processor.
+    sti();
+
+    // get total number of tickets
+    acquire(&ptable.lock);
+    // TODO : if this is intialized as 0 then there is a lock problem
+    total_tickets=0; current_tickets=0;
+    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+      // TODO : need runnable? 
+      // TODO : need lock?
+      // cprintf("STATE is : %d\n", p->state);
+      if(p->state == RUNNABLE) total_tickets += p->tickets; 
+    }
+    if (total_tickets == 0) {
+      release(&ptable.lock);
+      continue;
+    } 
+
+    // get winner ticket
+    winner_ticket = getrandom(total_tickets);
+    // cprintf("Winner ticket : %d\n", winner_ticket);
+
+    // Loop over process table looking for process to run.
+    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+      if(p->state != RUNNABLE) continue;
+
+      current_tickets += p->tickets;
+      // cprintf("Current tickets : %d and current process ticket %d, state %d id %d\n", current_tickets, p->tickets, p->state, p->pid);
+      if(current_tickets >= winner_ticket){
+        // Switch to chosen process.  It is the process's job
+        // to release ptable.lock and then reacquire it
+        // before jumping back to us.
+        c->proc = p;
+        switchuvm(p);
+        p->state = RUNNING;
+
+        acquire(&tickslock);
+        start_ticks = ticks;
+        release(&tickslock);
+
+        swtch(&(c->scheduler), p->context);
+        
+        acquire(&tickslock);
+        p->ticks += (ticks - start_ticks);
+        release(&tickslock);
+        switchkvm();
+
+        // Process is done running for now.
+        // It should have changed its p->state before coming back.
+        c->proc = 0;
+        // cprintf("Process returned and state %d id %d\n", p->state, p->pid);
+
+        // now break to get new processor
+        break;
+      }
+      
+    }
+    release(&ptable.lock);
   }
 }
 
+
 // Enter scheduler.  Must hold only ptable.lock
 // and have changed proc->state. Saves and restores
 // intena because intena is a property of this
@@ -532,3 +625,35 @@ procdump(void)
     cprintf("\n");
   }
 }
+
+
+// custom
+void
+setproctickets(int number)
+{
+  acquire(&ptable.lock);
+  myproc()->tickets = number;
+  release(&ptable.lock);
+}
+
+
+int 
+fillpinfo(struct pstat* pt)
+{
+  acquire(&ptable.lock);
+  int no_p = 0;
+  struct proc *p;
+
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+    pt->inuse[no_p] = 1;
+    if(p->state == UNUSED) continue; //pt->inuse[no_p] = 0;
+    pt->pid[no_p] = p->pid;
+    pt->ticks[no_p] = p->ticks; 
+    pt->tickets[no_p] = p->tickets;
+    no_p += 1;
+  }
+  
+  pt->num_processes = no_p; // TODO : delete this
+  release(&ptable.lock);
+  return 0;
+}
\ No newline at end of file
diff --git a/proc.h b/proc.h
index 1647114..ace27d0 100644
--- a/proc.h
+++ b/proc.h
@@ -49,6 +49,10 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+
+  // custom
+  int tickets;
+  int ticks;
 };
 
 // Process memory is laid out contiguously, low addresses first:
diff --git a/pstat.h b/pstat.h
new file mode 100644
index 0000000..aa7f07e
--- /dev/null
+++ b/pstat.h
@@ -0,0 +1,14 @@
+#ifndef _PSTAT_H_
+#define _PSTAT_H_
+#include "param.h"
+
+struct pstat {
+  int num_processes; // TODO : delete this
+  int inuse[NPROC];   // whether this slot of the process table is in use (1 or 0)
+  int tickets[NPROC]; // the number of tickets this process has
+  int pid[NPROC];     // the PID of each process
+  int ticks[NPROC];   // the number of ticks each process has accumulated
+
+};
+
+#endif // _PSTAT_H_
\ No newline at end of file
diff --git a/random.c b/random.c
new file mode 100644
index 0000000..dc9aed4
--- /dev/null
+++ b/random.c
@@ -0,0 +1,39 @@
+static unsigned random_seed = 1;
+
+#define RANDOM_MAX ((1u << 31u) - 1u)
+unsigned lcg_parkmiller(unsigned *state)
+{
+    const unsigned N = 0x7fffffff;
+    const unsigned G = 48271u;
+
+    /*  
+        Indirectly compute state*G%N.
+
+        Let:
+          div = state/(N/G)
+          rem = state%(N/G)
+
+        Then:
+          rem + div*(N/G) == state
+          rem*G + div*(N/G)*G == state*G
+
+        Now:
+          div*(N/G)*G == div*(N - N%G) === -div*(N%G)  (mod N)
+
+        Therefore:
+          rem*G - div*(N%G) === state*G  (mod N)
+
+        Add N if necessary so that the result is between 1 and N-1.
+    */
+    unsigned div = *state / (N / G);  /* max : 2,147,483,646 / 44,488 = 48,271 */
+    unsigned rem = *state % (N / G);  /* max : 2,147,483,646 % 44,488 = 44,487 */
+
+    unsigned a = rem * G;        /* max : 44,487 * 48,271 = 2,147,431,977 */
+    unsigned b = div * (N % G);  /* max : 48,271 * 3,399 = 164,073,129 */
+
+    return *state = (a > b) ? (a - b) : (a + (N - b));
+}
+
+unsigned next_random() {
+    return lcg_parkmiller(&random_seed);
+}
diff --git a/syscall.c b/syscall.c
index ee85261..9fd1b92 100644
--- a/syscall.c
+++ b/syscall.c
@@ -103,6 +103,12 @@ extern int sys_unlink(void);
 extern int sys_wait(void);
 extern int sys_write(void);
 extern int sys_uptime(void);
+// CUSTOM
+extern int sys_settickets(void);
+extern int sys_gettickets(void);
+extern int sys_getpinfo(void);
+extern int sys_getrand(void);
+extern int sys_yield(void);
 
 static int (*syscalls[])(void) = {
 [SYS_fork]    sys_fork,
@@ -126,6 +132,12 @@ static int (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+// CUSTOM
+[SYS_settickets] sys_settickets,
+[SYS_gettickets] sys_gettickets,
+[SYS_getpinfo]   sys_getpinfo,
+[SYS_getrand]    sys_getrand,
+[SYS_yield]      sys_yield,
 };
 
 void
diff --git a/syscall.h b/syscall.h
index bc5f356..0cb56e0 100644
--- a/syscall.h
+++ b/syscall.h
@@ -20,3 +20,10 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+
+// CUSTOM
+#define SYS_settickets 22
+#define SYS_gettickets 23
+#define SYS_getpinfo   24 
+#define SYS_getrand    25
+#define SYS_yield      26
\ No newline at end of file
diff --git a/sysproc.c b/sysproc.c
index 0686d29..b2f6499 100644
--- a/sysproc.c
+++ b/sysproc.c
@@ -6,6 +6,7 @@
 #include "memlayout.h"
 #include "mmu.h"
 #include "proc.h"
+#include "pstat.h"
 
 int
 sys_fork(void)
@@ -89,3 +90,53 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+/////////////////////// CUSTOM ////////////////////
+int
+sys_settickets(void)
+{
+  int n;
+  argint(0, &n);
+  // return -1 if input < 1
+  if(n< 1)
+    return -1;
+
+  //cprintf("n is %d\n", n);
+  setproctickets(n);
+  return 0; // successful
+}
+
+
+int
+sys_gettickets(void)
+{
+  return myproc()->tickets;
+}
+
+
+int
+sys_getpinfo(void)
+{
+  struct pstat *pt;
+  if(argptr (0 , (void*)&pt ,sizeof(*pt)) < 0) return -1; 
+  return fillpinfo(pt);
+}
+
+
+int rand_y = 1320;
+int
+sys_getrand(void)
+{
+  //https://en.wikipedia.org/wiki/Linear_congruential_generator
+  int mod;
+  argint(0, &mod);
+
+  rand_y = ((23*rand_y + 120) % mod);
+  return rand_y+1;
+}
+
+void
+sys_yield(void)
+{
+  yield();
+}
\ No newline at end of file
diff --git a/testpinfo.c b/testpinfo.c
new file mode 100644
index 0000000..2362b64
--- /dev/null
+++ b/testpinfo.c
@@ -0,0 +1,24 @@
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+#include "pstat.h"
+#include "param.h"
+
+int main()
+{
+    struct pstat *pt = malloc (sizeof(struct pstat));
+    getpinfo(pt);
+    
+    // test random
+    printf(1, "Random gen : %d\n", getrand(132));
+    printf(1, "Random gen : %d\n", getrand(132));
+    printf(1, "Random gen : %d\n", getrand(132));
+
+    int i=0;
+    printf(1, "Inuse, Tickets, ID, Ticks\n");
+    for(i=0; i<5; i++)
+    {
+        printf(1, "%d %d %d %d\n", pt->inuse[i], pt->tickets[i], pt->pid[i], pt->ticks[i]);
+    }
+    exit();
+}
\ No newline at end of file
diff --git a/testtickets.c b/testtickets.c
new file mode 100644
index 0000000..6d36efe
--- /dev/null
+++ b/testtickets.c
@@ -0,0 +1,24 @@
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+
+int main()
+{
+    int pid;
+    printf(1, "Default tickets got was %d\n", gettickets()); // should be 1
+    settickets(100);  // now tickets should be 100
+    printf(1, "After change tickets got was %d\n", gettickets()); // should be 100
+    pid = fork();
+    // // child process
+    if(pid == 0)
+    {   
+        printf(1, "Child tickets got was %d\n", gettickets()); // should be 100
+        // exit();
+    }
+    else
+    {     
+        printf(1, "Parent tickets got was %d\n", gettickets()); // should be 100
+    }
+    // TODO : this returning zombie for some reason ?
+    exit();
+}
\ No newline at end of file
diff --git a/timewithtickets.c b/timewithtickets.c
new file mode 100644
index 0000000..cddd2ec
--- /dev/null
+++ b/timewithtickets.c
@@ -0,0 +1,133 @@
+#include "types.h"
+#include "mmu.h"
+#include "param.h"
+#include "proc.h"
+#include "user.h"
+#include "pstat.h"
+
+#undef USE_YIELD
+#define MAX_CHILDREN 32
+#define LARGE_TICKET_COUNT 100000
+#define MAX_YIELDS_FOR_SETUP 100
+
+__attribute__((noreturn))
+void yield_forever() {
+    while (1) {
+        yield();
+    }
+}
+
+__attribute__((noreturn))
+void run_forever() {
+    while (1) {
+        __asm__("");
+    }
+}
+
+int spawn(int tickets) {
+    int pid = fork();
+    if (pid == 0) {
+        settickets(tickets);
+        yield();
+#ifdef USE_YIELD
+        yield_forever();
+#else
+        run_forever();
+#endif
+    } else if (pid != -1) {
+        return pid;
+    } else {
+        printf(2, "error in fork\n");
+        return -1;
+    }
+}
+
+int find_index_of_pid(int *list, int list_size, int pid) {
+    for (int i = 0; i < list_size; ++i) {
+        if (list[i] == pid)
+            return i;
+    }
+    return -1;
+}
+
+void wait_for_ticket_counts(int num_children, int *pids, int *tickets) {
+    for (int yield_count = 0; yield_count < MAX_YIELDS_FOR_SETUP; ++yield_count) {
+        yield();
+        int done = 1;
+        struct pstat info;
+        getpinfo(&info);
+        for (int i = 0; i < num_children; ++i) {
+            int index = find_index_of_pid(info.pid, info.num_processes, pids[i]);
+            if (info.tickets[index] != tickets[i]) done = 0;
+        }
+        if (done)
+            break;
+    }
+}
+
+int main(int argc, char *argv[])
+{
+    if (argc < 3) {
+        printf(2, "usage: %s seconds tickets1 tickets2 ... ticketsN\n"
+                  "       seconds is the number of time units to run for\n"
+                  "       ticketsX is the number of tickets to give to subprocess N\n",
+                  argv[0]);
+        exit();
+    }
+    int tickets_for[MAX_CHILDREN];
+    int active_pids[MAX_CHILDREN];
+    int num_seconds = atoi(argv[1]);
+    int num_children = argc - 2;
+    if (num_children > MAX_CHILDREN) {
+        printf(2, "only up to %d supported\n", MAX_CHILDREN);
+        exit();
+    }
+    /* give us a lot of ticket so we don't get starved */
+    settickets(LARGE_TICKET_COUNT);
+    for (int i = 0; i < num_children; ++i) {
+        int tickets = atoi(argv[i + 2]);
+        tickets_for[i] = tickets;
+        active_pids[i] = spawn(tickets);
+    }
+    wait_for_ticket_counts(num_children, active_pids, tickets_for);
+    struct pstat before, after;
+    before.num_processes = after.num_processes = -1;
+    getpinfo(&before);
+    sleep(num_seconds);
+    getpinfo(&after);
+    for (int i = 0; i < num_children; ++i) {
+        kill(active_pids[i]);
+    }
+    for (int i = 0; i < num_children; ++i) {
+        wait();
+    }
+    if (before.num_processes >= NPROC || after.num_processes >= NPROC) {
+        printf(2, "getpinfo's num_processes is greater than NPROC before parent slept\n");
+        return 1;
+    }
+    if (before.num_processes < 0 || after.num_processes < 0) {
+        printf(2, "getpinfo's num_processes is negative -- not changed by syscall?\n");
+        return 1;
+    }
+    printf(1, "TICKETS\tTICKS\n");
+    for (int i = 0; i < num_children; ++i) {
+        int before_index = find_index_of_pid(before.pid, before.num_processes, active_pids[i]);
+        int after_index = find_index_of_pid(after.pid, after.num_processes, active_pids[i]);
+        if (before_index == -1)
+            printf(2, "child %d did not exist for getpinfo before parent slept\n", i);
+        if (after_index == -1)
+            printf(2, "child %d did not exist for getpinfo after parent slept\n", i);
+        if (before_index == -1 || after_index == -1) {
+            printf(1, "%d\t--unknown--\n", tickets_for[i]);
+        } else {
+            if (before.tickets[before_index] != tickets_for[i]) {
+                printf(2, "child %d had wrong number of tickets in getpinfo before parent slept\n", i);
+            }
+            if (after.tickets[after_index] != tickets_for[i]) {
+                printf(2, "child %d had wrong number of tickets in getpinfo after parent slept\n", i);
+            }
+            printf(1, "%d\t%d\n", tickets_for[i], after.ticks[after_index] - before.ticks[before_index]);
+        }
+    }
+    exit();
+}
\ No newline at end of file
diff --git a/user.h b/user.h
index 4f99c52..8d99b77 100644
--- a/user.h
+++ b/user.h
@@ -1,5 +1,6 @@
 struct stat;
 struct rtcdate;
+struct pstat;
 
 // system calls
 int fork(void);
@@ -24,6 +25,13 @@ char* sbrk(int);
 int sleep(int);
 int uptime(void);
 
+// custom
+int settickets(int);
+int gettickets();
+int getpinfo(struct pstat*);
+int getrand(int modulus);
+void yield(void);
+
 // ulib.c
 int stat(const char*, struct stat*);
 char* strcpy(char*, const char*);
diff --git a/usys.S b/usys.S
index 8bfd8a1..73dde53 100644
--- a/usys.S
+++ b/usys.S
@@ -29,3 +29,8 @@ SYSCALL(getpid)
 SYSCALL(sbrk)
 SYSCALL(sleep)
 SYSCALL(uptime)
+SYSCALL(settickets)
+SYSCALL(gettickets)
+SYSCALL(getpinfo)
+SYSCALL(getrand)
+SYSCALL(yield)
\ No newline at end of file
